// Code generated by go-rpc-cmdline/protoc-gen-gorpc. DO NOT EDIT.
// source: 

package hello

import (
	"context"

   _ "github.com/hitzhangjie/go-rpc/"
   _ "github.com/hitzhangjie/go-rpc/http"

   	

    "github.com/hitzhangjie/go-rpc/server"
    "github.com/hitzhangjie/go-rpc/client"
    "github.com/hitzhangjie/go-rpc/codec"

    
)

/* ************************************ Service Definition ************************************ */

// HelloSvrService defines service
type HelloSvrService interface {

	
	
	Hello(ctx context.Context, req *.hello.Request,rsp *.hello.Response) (err error) 
}


func HelloSvrService_Hello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (rspbody interface{}, err error) {

    req := &.hello.Request{}
	rsp := &.hello.Response{}
	filters, err := f(req)
    if err != nil {
    	return nil, err
    }
	handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
	    return svr.(HelloSvrService).Hello(ctx, reqbody.(*.hello.Request), rspbody.(*.hello.Response))
	}

	err = filters.Handle(ctx, req, rsp, handleFunc)
	if err != nil {
		return nil, err
	}

	return rsp, nil
}

// HelloSvrServer_ServiceDesc descriptor for server.RegisterService
var HelloSvrServer_ServiceDesc = server.ServiceDesc {
    ServiceName: "hello.HelloSvr",
    HandlerType: ((*HelloSvrService)(nil)),
    Methods: []server.Method{{Name: "Hello", Func: HelloSvrService_Hello_Handler},
    },
}

// RegisterHelloSvrService register service
func RegisterHelloSvrService(s server.Service, svr HelloSvrService) {
	s.Register(&HelloSvrServer_ServiceDesc, svr)
}



/* ************************************ Client Definition ************************************ */



// HelloSvrClientProxy defines service client proxy
type HelloSvrClientProxy interface {
	
   	
	Hello(ctx context.Context, req *.hello.Request, opts ...client.Option) (rsp *.hello.Response, err error) 
}

type helloSvrClientProxyImpl struct{
	client client.Client
	opts []client.Option
}

func NewHelloSvrClientProxy(opts...client.Option) HelloSvrClientProxy {
	return &helloSvrClientProxyImpl {client: client.DefaultClient, opts: opts}
}


func (c *helloSvrClientProxyImpl) Hello(ctx context.Context, req *.hello.Request, opts ...client.Option) (rsp *.hello.Response, err error) {

	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName(HelloSvrServer_ServiceDesc.Methods[0].Name)
	msg.WithCalleeServiceName(HelloSvrServer_ServiceDesc.ServiceName)

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp = &.hello.Response{}

	err = c.client.Invoke(ctx, req, rsp, callopts...)
	if err != nil {
	    return nil, err
	}

	return rsp, nil
}



